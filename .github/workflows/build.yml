on: push
jobs:
  build-mingw:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
      - env:
          MSYSTEM: MINGW64
        run: |
          $ErrorActionPreference = "Continue"
          C:\msys64\usr\bin\bash.exe -l -c "pacman -Syu --noconfirm --noprogressbar"
          C:\msys64\usr\bin\bash.exe -l -c "pacman -Syu --needed --noconfirm --noprogressbar base-devel cmake git mingw-w64-x86_64-toolchain mingw-w64-x86_64-libarchive mingw-w64-x86_64-boost mingw-w64-x86_64-tinyxml2"
          git fetch --unshallow --tags
          C:\msys64\usr\bin\bash.exe -l -c "
            cd /d/a/LxRunOffline/LxRunOffline &&
            cmake -G 'MSYS Makefiles' -DCMAKE_BUILD_TYPE=Release . &&
            make package -j"
          if ($LASTEXITCODE -ne 0) { Exit 1 }
      - if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -Force ~\.ssh
          [IO.File]::WriteAllBytes( `
              "$Env:USERPROFILE\.ssh\id_ed25519", `
              [Convert]::FromBase64String("${{ secrets.DEPLOYKEY  }}"))
          cmd /c 'ssh-keyscan web.sourceforge.net > "%USERPROFILE%\.ssh\known_hosts" 2>nul'
          cmd /c "scp LxRunOffline-$(git describe --tags)-mingw.zip ddosolitary@web.sourceforge.net:/home/project-web/ddosolitary-builds/htdocs/LxRunOffline/ 2>&1"
          if ($LASTEXITCODE -ne 0) { exit 1 }
  build-msvc:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
      - env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static
        run: |
          $ErrorActionPreference = "Continue"
          pushd $Env:VCPKG_INSTALLATION_ROOT
          git pull
          .\bootstrap-vcpkg.bat
          popd
          vcpkg integrate install
          $portPath = "$Env:VCPKG_INSTALLATION_ROOT\ports\libarchive\"
          Copy-Item misc\remove-slash-conversion.patch $portPath
          $portfilePath = (Join-Path $portPath portfile.cmake)
          (Get-Content $portfilePath) -replace 'PATCHES', 'PATCHES remove-slash-conversion.patch' | Set-Content $portfilePath
          vcpkg install libarchive boost-program-options boost-format tinyxml2
          git fetch --unshallow --tags
          cmd /c '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat" & set' |
            foreach { if ($_ -match "=") { $v = $_.split("="); Set-Item -Force -Path "Env:\$($v[0])" -Value "$($v[1])" } }
          cmake . `
            -G "NMake Makefiles" `
            -DCMAKE_TOOLCHAIN_FILE="$Env:VCPKG_INSTALLATION_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET="$Env:VCPKG_DEFAULT_TRIPLET" `
            -DCMAKE_BUILD_TYPE=Release `
            -DBUILD_CHOCO_PKG=ON
          nmake package
          if ($LASTEXITCODE -ne 0) { Exit 1 }
      - if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -Force ~\.ssh
          [IO.File]::WriteAllBytes( `
              "$Env:USERPROFILE\.ssh\id_ed25519", `
              [Convert]::FromBase64String("${{ secrets.DEPLOYKEY  }}"))
          cmd /c 'ssh-keyscan web.sourceforge.net > "%USERPROFILE%\.ssh\known_hosts" 2>nul'
          $version = git describe --tags
          cmd /c "scp LxRunOffline-$version-msvc.zip ddosolitary@web.sourceforge.net:/home/project-web/ddosolitary-builds/htdocs/LxRunOffline/ 2>&1"
          if ($LASTEXITCODE -ne 0) { exit 1 }
          if (-not $version.Contains("-")) {
            cmake -DCOMPONENT=choco -DCMAKE_INSTALL_PREFIX="$PWD" -P cmake_install.cmake
            cmd /c "scp lxrunoffline.$($version.Substring(1)).nupkg ddosolitary@web.sourceforge.net:/home/project-web/ddosolitary-builds/htdocs/LxRunOffline/ 2>&1"
            if ($LASTEXITCODE -ne 0) { exit 1 }
          }
